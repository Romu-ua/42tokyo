以下のコードの動きをよく確認した後、実際の数値を入れて動作を確かめてください。

case.c
#include "main.h"

int	only_sb(t_node **B)
{
	swap_b(B, NULL);
	if ((*B)->index < (*B)->pnextnode->index &&
	(*B)->pnextnode->index < (*B)->pprevnode->index)
		return (1);
	swap_b(B, NULL);
	return (0);
}

int	sb_rrb(t_node **B)
{
	swap_b(B, NULL);
	reverse_rotateB(B, NULL);
	if ((*B)->index < (*B)->pnextnode->index &&
	(*B)->pnextnode->index < (*B)->pprevnode->index)
		return (1);
	rotateB(B, NULL);
	swap_b(B, NULL);
	return (0);
}

int only_rb(t_node **B)
{
	rotateB(B, NULL);
	if ((*B)->index < (*B)->pnextnode->index &&
	(*B)->pnextnode->index < (*B)->pprevnode->index)
		return (1);
	reverse_rotateB(B, NULL);
	return (0);
}

int	sb_rb(t_node **B)
{
	swap_b(B, NULL);
	rotateB(B, NULL);
	if ((*B)->index < (*B)->pnextnode->index &&
	(*B)->pnextnode->index < (*B)->pprevnode->index)
		return (1);
	reverse_rotateB(B, NULL);
	swap_b(B, NULL);
	return (0);
}

int	only_rrb(t_node **B)
{
	reverse_rotateB(B, NULL);
	if ((*B)->index < (*B)->pnextnode->index &&
	(*B)->pnextnode->index < (*B)->pprevnode->index)
		return (1);
	rotateB(B, NULL);
	return (0);
}

half_push.c
#include "main.h"

int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

void	half_push_B(t_node **A, t_node **B, t_ops **ops)
{
	int		len;
	int		i;
	int		threshold;
	int		*indices;
	t_node	*tmp;

	len = lengthList(A);
	indices = (int *)malloc(sizeof(int) * len);
	if (!indices)
		return ;
	i = 0;
	tmp = *A;
	while (i < len)
	{
		indices[i] = tmp->index;
		tmp = tmp->pnextnode;
		i++;
	}
	qsort(indices, len, sizeof(int), compare);
	threshold = indices[len / 2];
	free(indices);
	i = 0;
	while (i < len)
	{
		if ((*A)->index < threshold)
		{
			push_b(A, B, ops);
			i++;
			continue;
		}
		i++;
		rotateA(A, ops);
	}
}

void	half_push_A(t_node **B, t_node **A, t_ops **ops)
{
	int		len;
	int		i;
	int		threshold;
	int		*indices;
	t_node	*tmp;


	len = lengthList(B);
	indices = (int *)malloc(sizeof(int) * len);
	if (!indices)
		return ;
	i = 0;
	tmp = *B;
	while (i < len)
	{
		indices[i] = tmp->index;
		tmp = tmp->pnextnode;
		i++;
	}
	qsort(indices, len, sizeof(int), compare);

	threshold = indices[len / 2];
	free(indices);
	i = 0;
	while (i < len)
	{
		if ((*B)->index > threshold)
		{

			push_a(B, A, ops);
			i++;
			continue;
		}
		i++;
		rotateB(B, ops);
	}
}

main.c
#include "main.h"

void displayForward(t_node** head)
{
	t_node* tmpNode;
	if (!*head)
		return ;
	tmpNode = *head;
	while (tmpNode->pnextnode != *head)
	{
		printf("%d <-> ", tmpNode->data);
		tmpNode = tmpNode->pnextnode;
	}
	printf("%d <-> (Head)\n", tmpNode->data);
}

void	final_fix(t_node **A, t_ops **ops)
{
	t_node *tmp;
	int		len;
	int		cnt;

	len = lengthList(A);
	tmp = *A;
	cnt = 0;
	while (tmp->pnextnode != *A)
	{
		// printf("cnt : %d\n", cnt);
		if (tmp->index == 0)
			break;
		tmp = tmp->pnextnode;
		cnt++;
	}
	if (cnt < len / 2)
	{
		while (cnt)
		{
			rotateA(A, ops);
			cnt--;
		}
	}
	else
	{
		while (len - cnt - 1)
		{
			reverse_rotateA(A, ops);
			cnt++;
		}
	}
}

int	op_lengthList(t_ops **ops)
{
	t_ops	*tmp;
	int		len;

	if (!ops || !*ops)
		return (0);
	tmp = *ops;
	len = 1;
	while (tmp->pnext != *ops)
	{
		len++;
		tmp = tmp->pnext;
	}
	return (len);
}

int main(int argc, char **argv)
{
	t_node	*A;
	t_node	*B;
	t_node	*sorted;
	t_ops	*ops;

	if (argc == 1)
		return (0);
	A = NULL;
	B = NULL;
	sorted = NULL;
	ops = NULL;

	while (argc - 1)
	{
		insertAddHead(&A, atoi(argv[argc - 1]));
		insertAddHead(&sorted, atoi(argv[argc - 1]));
		argc--;
	}
	// printf("input A: ");
	// displayForward(&A);

	SortList(&sorted);
	AddIndex(&A, &sorted);
	half_push_B(&A, &B, &ops);

	// printf("half_push_B\n");
	// printf("A ");
	// displayForward(&A);
	// printf("B ");
	// displayForward(&B);

	// printf("--------------\n");

	operation(&A, &B, &ops);
	final_fix(&A, &ops);
	displayForward(&A);
	// print_ops(&ops);
	// if (!ops)
	// 	printf("ops is NULL");
	// printf("%d\n", op_lengthList(&ops));
	// printf("%d\n", ops->op);
	// ops = ops->pnext;
	// printf("%d", ops->op);
	return (0);
}

operation.c
#include "main.h"

void	sort_n3(t_node **B, t_ops **ops)
{
	if (only_sb(B))
	{
		// printf("case 1 only_sb\n");
		record_op(ops, sb);
		return ;
	}
	else if (sb_rrb(B))
	{
		// printf("case 2 sa_rra\n");
		record_op(ops, sb);
		record_op(ops, rrb);
		return ;
	}
	else if (only_rb(B))
	{
		// printf("case 3 only_ra\n");
		record_op(ops, rb);
		return ;
	}
	else if (sb_rb(B))
	{
		// printf("case 4 sa_ra\n");
		record_op(ops, sb);
		record_op(ops, rb);
		return ;
	}
	else if (only_rrb(B))
	{
		// printf("case 5 only_rra");
		record_op(ops, rrb);
		return ;
	}
	return ;
}

void	sort(t_node **B, t_ops **ops)
{
	int	len;

	len = lengthList(B);
	if (len == 1)
		return ;
	else if (len == 2)
	{
		if ((*B)->index > (*B)->pnextnode->index)
			swap_b(B, ops);
	}
	else
		sort_n3(B, ops);
}

void	fix(t_node **A, t_node **B, t_ops **ops)
{
	int	len;

	len = lengthList(B);
	while (len)
	{
		push_a(B, A, ops);
		rotateA(A, ops);
		len--;
	}
}

// すでに昇順にソートされていると機能しない
int	get_elm_num(t_node **A)
{
	int		max;
	int		min;
	int		count;
	t_node	*tmp;

	if (!A)
		return (-1);
	max = -1;
	min = (*A)->pprevnode->index + 1;
	count = 0;
	tmp = *A;

	// printf("min : %d\n", min);
	while (max - min + 1 != count)
	{
		count++;
		if (tmp->index > max)
			max = tmp->index;
		tmp = tmp->pnextnode;
	}
	return (count);
}

int	check_sorted(t_node **A)
{
	t_node *start;
	t_node *tmp;

	tmp = *A;
	start = NULL;
	// start nodeを見つける
	while (tmp->pnextnode != *A)
	{
		if (tmp->index == 0)
		{
			start = tmp;
			break;
		}
		tmp = tmp->pnextnode;
	}

	if (!start)
		return (0);
	tmp = start;
	while (start->pnextnode != tmp)
	{
		if (start->index != start->pnextnode->index - 1)
			return (0);
		start = start->pnextnode;
	}
	return (1);
}

void	operation(t_node **A, t_node **B, t_ops **ops)
{
	int	elm_num;

	while (1)
	{
		while (1)
		{
			if (lengthList(B) <= 3)
				break;
			half_push_A(B, A, ops);
			// displayForward(A);
			// displayForward(B);
		}
		sort(B, ops);
		fix(A, B, ops);

		// printf("after fix A : ");
		// displayForward(A);
		// printf("Before displayForward: A = %p, A->pnextnode = %p\n", (void*)*A, (void*)(*A ? (*A)->pnextnode : NULL));
		// displayForward(A);
		// printf("After displayForward: A = %p, A->pnextnode = %p\n", (void*)*A, (void*)(*A ? (*A)->pnextnode : NULL));


		if (check_sorted(A))
		{
			printf("finish sort!!\n");
			break;
		}
		elm_num = get_elm_num(A);
		printf("elm_num is %d\n", elm_num);
		if (elm_num == 0)
			break;
		while (elm_num > 0)
		{
			push_b(A, B, ops);
			// printf("pa\n");
			elm_num--;
		}
		// displayForward(A);
		// displayForward(B);
	}

}

push.c
#include "main.h"

void	remove_list(t_node **src)
{
	if ((*src)->pnextnode == (*src))
		*src = NULL;
	else
	{
		(*src)->pnextnode->pprevnode = (*src)->pprevnode;
		(*src)->pprevnode->pnextnode = (*src)->pnextnode;
		*src = (*src)->pnextnode;
	}
}

void	push_a(t_node **src, t_node **dest, t_ops **ops)
{
	t_node	*topsrc;
	t_node	*desthead;
	t_node	*desttail;

	if (!*src)
		return ;
	topsrc = *src;
	remove_list(src);
	if (!*dest)
	{
		*dest = topsrc;
		topsrc->pnextnode = topsrc;
		topsrc->pprevnode = topsrc;
	}
	else
	{
		desthead = *dest;
		desttail = (*dest)->pprevnode;
		topsrc->pnextnode = desthead;
		topsrc->pprevnode = desttail;
		desthead->pprevnode = topsrc;
		desttail->pnextnode = topsrc;
		*dest = topsrc;
	}
	if (ops)
		record_op(ops, pa);
}

void	push_b(t_node **src, t_node **dest, t_ops **ops)
{
	t_node	*topsrc;
	t_node	*desthead;
	t_node	*desttail;

	if (!*src)
		return ;
	topsrc = *src;
	remove_list(src);
	if (!*dest)
	{
		*dest = topsrc;
		topsrc->pnextnode = topsrc;
		topsrc->pprevnode = topsrc;
	}
	else
	{
		desthead = *dest;
		desttail = (*dest)->pprevnode;
		topsrc->pnextnode = desthead;
		topsrc->pprevnode = desttail;
		desthead->pprevnode = topsrc;
		desttail->pnextnode = topsrc;
		*dest = topsrc;
	}
	if (ops)
		record_op(ops, pb);

}

record_op.c
#include "main.h"

t_ops *create_newop(t_op op)
{
	t_ops *new_op = (t_ops *)malloc(sizeof(t_ops));
	if (!new_op)
		return (NULL);
	new_op->op = op;
	new_op->pnext = NULL;
	new_op->pprev = NULL;
	return (new_op);
}

void	record_op(t_ops **ops, t_op op)
{
	t_ops	*new_op;
	t_ops	*last;

	new_op = create_newop(op);
	if (!new_op)
		return ;
	if (!*ops)
	{
		*ops = new_op;
		new_op->pnext = new_op;
		new_op->pprev = new_op;
	}
	else
	{
		last = (*ops)->pprev;

		new_op->pnext = *ops;
		new_op->pprev = last;
		last->pnext = new_op;
		(*ops)->pprev = new_op;
		*ops = new_op;
	}
}

void	print(t_op op)
{
	if (op == 0)
		printf("sa\n");
	else if (op == 1)
		printf("sb\n");
	else if (op == 2)
		printf("pa\n");
	else if (op == 3)
		printf("pb\n");
	else if (op == 4)
		printf("ra\n");
	else if (op == 5)
		printf("rb\n");
	else if (op == 6)
		printf("rra\n");
	else if (op == 7)
		printf("rrb\n");
}

void	print_ops(t_ops **ops)
{
	t_ops	*tmp;

	if (!*ops)
		return ;
	tmp = *ops;
	if ((*ops)->pprev == *ops)
	{
		print((*ops)->op);
		return ;
	}
	tmp = tmp->pprev;
	while (1)
	{
		print(tmp->op);
		if (tmp == *ops)
			break;
		tmp = tmp->pprev;
	}
}

reverse_rotate.c
# include "main.h"

void	reverse_rotateA(t_node** stack, t_ops **ops)
{
	if (!*stack || (*stack)->pnextnode == *stack)
		return ;
	*stack = (*stack)->pprevnode;
	if (ops)
		record_op(ops, rra);
}

void	reverse_rotateB(t_node** stack, t_ops **ops)
{
	if (!*stack || (*stack)->pnextnode == *stack)
		return ;
	*stack = (*stack)->pprevnode;
	if (ops)
		record_op(ops, rrb);
}

rotate.c
#include "main.h"

void	rotateA(t_node** stack, t_ops **ops)
{
	if (!*stack || (*stack)->pprevnode == *stack)
		return ;
	*stack = (*stack)->pnextnode;
	if (ops)
		record_op(ops, ra);
}
void	rotateB(t_node** stack, t_ops **ops)
{
	if (!*stack || (*stack)->pprevnode == *stack)
		return ;
	*stack = (*stack)->pnextnode;
	if (ops)
		record_op(ops, rb);
}

sort_addinex.c
#include "main.h"

void	AddIndex(t_node **head, t_node **sorted)
{
	t_node	*searchednode;
	t_node	*sourcenode;
	int		i;
	int		len;

	sourcenode = *sorted;
	len = lengthList(head);
	i = 0;
	while (i < len)
	{
		searchednode = searchNode(head, sourcenode->data);
		searchednode->index = i;
		sourcenode = sourcenode->pnextnode;
		i++;
	}
}

void	SortList(t_node **head)
{
	int		i;
	int		j;
	int		len;
	int		tmp;
	t_node	*currentnode;

	if (!*head)
		return ;
	i = 0;
	len = lengthList(head);
	while (i++ < len)
	{
		j = 0;
		currentnode = *head;
		while (j++ < len - i)
		{
			if (currentnode->data > currentnode->pnextnode->data)
			{
				tmp = currentnode->data;
				currentnode->data = currentnode->pnextnode->data;
				currentnode->pnextnode->data = tmp;
			}
			currentnode = currentnode->pnextnode;
		}
	}
}

swap.c
include "main.h"

void	swap_a(t_node** stack, t_ops **ops)
{
	int	tmpdata;
	int	tmpindex;

	if (!*stack || (*stack)->pnextnode == *stack)
		return ;
	tmpdata = (*stack)->data;
	tmpindex = (*stack)->index;
	(*stack)->data = (*stack)->pnextnode->data;
	(*stack)->index = (*stack)->pnextnode->index;
	(*stack)->pnextnode->data = tmpdata;
	(*stack)->pnextnode->index = tmpindex;

	if (ops)
		record_op(ops, sb);
}

void	swap_b(t_node** stack, t_ops **ops)
{
	int	tmpdata;
	int	tmpindex;

	if (!*stack || (*stack)->pnextnode == *stack)
		return ;
	tmpdata = (*stack)->data;
	tmpindex = (*stack)->index;
	(*stack)->data = (*stack)->pnextnode->data;
	(*stack)->index = (*stack)->pnextnode->index;
	(*stack)->pnextnode->data = tmpdata;
	(*stack)->pnextnode->index = tmpindex;
	if (ops)
		record_op(ops, sb);

}

utils.c
#include "main.h"

int	lengthList(t_node **stack)
{
	t_node	*tmpNode;
	int		len;

	if (!stack || !*stack)
		return (0);
	tmpNode = *stack;
	len = 1;
	while (tmpNode->pnextnode != *stack)
	{
		len++;
		tmpNode = tmpNode->pnextnode;
	}
	return (len);
}

t_node* createNode(int data)
{
	t_node* newNode = (t_node *)malloc(sizeof(t_node));
	if (!newNode)
		return (NULL);
	newNode->data = data;
	newNode->index = -1;
	newNode->pnextnode = NULL;
	newNode->pprevnode = NULL;
	return (newNode);
}

void insertAddHead(t_node** head, int data)
{
	t_node* newNode;

	newNode = createNode(data);
	if (!newNode)
		return ;
	if (!(*head))
	{
		*head = newNode;
		newNode->pnextnode = newNode;
		newNode->pprevnode = newNode;
	}
	else
	{
		newNode->pnextnode = *head;
		newNode->pprevnode = (*head)->pprevnode;
		(*head)->pprevnode->pnextnode = newNode;
		(*head)->pprevnode = newNode;
		*head = newNode;
	}
}

t_node* searchNode(t_node** head, int key)
{
	if (!*head)
		return (NULL);
	t_node *tmpNode = *head;
	while (tmpNode->pnextnode != *head)
	{
		if (tmpNode->data == key)
			return (tmpNode);
		tmpNode = tmpNode->pnextnode;
	}
	if (tmpNode->data == key)
		return (tmpNode);
	return (NULL);
}

main.h
#ifndef MAIN_H
# define MAIN_H

# include <stdio.h>
# include <stdlib.h>
# include <string.h>

typedef enum e_op {
	sa = 0,
	sb,
	pa,
	pb,
	ra,
	rb,
	rra,
	rrb
}	t_op;

typedef struct s_ops
{
	t_op	op;
	struct s_ops *pnext;
	struct s_ops *pprev;
}	t_ops;

typedef struct s_node {
	int		data;
	int		index;
	struct s_node *pnextnode;
	struct s_node *pprevnode;
}	t_node;

int		lengthList(t_node **stack);
t_node*	createNode(int data);
void	insertAddHead(t_node** head, int data);
t_node*	searchNode(t_node** head, int key);
void	SortList(t_node **head);
void	AddIndex(t_node **head, t_node **sorted);
void	push_a(t_node **src, t_node **dest, t_ops **ops);
void	push_b(t_node **src, t_node **dest, t_ops **ops);
void	swap_a(t_node** stack, t_ops **ops);
void	swap_b(t_node** stack, t_ops **ops);
void	rotateA(t_node** stack, t_ops **ops);
void	rotateB(t_node** stack, t_ops **ops);
void	reverse_rotateA(t_node** stack, t_ops **ops);
void	reverse_rotateB(t_node** stack, t_ops **ops);
void	remove_list(t_node **src);
void	record_op(t_ops **ops, t_op op);
int		ensure_capacity(t_ops **ops);
void	*my_realloc(void *ptr, size_t new_size, size_t old_size);
void	print_ops(t_ops **ops);
void	displayForward(t_node** head);
void	half_push_B(t_node **A, t_node **B, t_ops **ops);
void	half_push_A(t_node **B, t_node **A, t_ops **ops);
void	sort(t_node **B, t_ops **ops);
void	sort_n3(t_node **B, t_ops **ops);
void	operation(t_node **A, t_node **B, t_ops **ops);
int		check_sorted(t_node **A);
int		get_elm_num(t_node **A);
void	fix(t_node **A, t_node **B, t_ops **ops);
void	final_fix(t_node **A, t_ops **ops);

int		only_sb(t_node **B);
int		sb_rrb(t_node **B);
int		only_rb(t_node **B);
int		sb_rb(t_node **B);
int		only_rrb(t_node **B);

int	op_lengthList(t_ops **ops);

#endif
